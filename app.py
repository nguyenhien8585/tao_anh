import streamlit as st
import requests
import base64
from PIL import Image, ImageDraw, ImageFont
import io
import datetime
import json
from typing import Optional, Dict, Any
import os

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="üéØ T·∫°o ·∫¢nh Th·∫ª AI", 
    page_icon="üì∏",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    .main > div {
        padding: 2rem 1rem;
    }
    
    .stButton > button {
        width: 100%;
        height: 3rem;
        font-size: 1.1rem;
        font-weight: 600;
        border-radius: 10px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        color: white;
        transition: all 0.3s ease;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 25px rgba(102, 126, 234, 0.4);
    }
    
    .upload-section {
        border: 2px dashed #667eea;
        border-radius: 15px;
        padding: 2rem;
        text-align: center;
        background: #f8f9fa;
        margin: 1rem 0;
    }
    
    .success-box {
        background: #e8f5e8;
        border: 1px solid #4CAF50;
        border-radius: 10px;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    .error-box {
        background: #ffebee;
        border: 1px solid #f44336;
        border-radius: 10px;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    .info-box {
        background: #e3f2fd;
        border: 1px solid #2196F3;
        border-radius: 10px;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    .metric-card {
        background: white;
        border-radius: 10px;
        padding: 1rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        text-align: center;
    }
</style>
""", unsafe_allow_html=True)

# C·∫•u h√¨nh API
API_CONFIG = {
    'endpoint': 'https://api.llm.ai.vn/v1',
    'model': 'gemini:gemini-2.5-flash',
    'api_key': 'sk-j4DkzI7htsVqEZqC272d3b58B0Fb49A183573dD2Fc04F71d'  # Thay th·∫ø b·∫±ng API key th·ª±c
}

class IDPhotoGenerator:
    """Class ch√≠nh ƒë·ªÉ t·∫°o ·∫£nh th·∫ª AI"""
    
    def __init__(self):
        self.allowed_formats = ['jpg', 'jpeg', 'png', 'webp', 'bmp']
        self.max_file_size = 5 * 1024 * 1024  # 5MB
        
    def validate_image(self, uploaded_file) -> Dict[str, Any]:
        """Validate file ·∫£nh upload"""
        if not uploaded_file:
            return {'valid': False, 'error': 'Vui l√≤ng t·∫£i l√™n ·∫£nh!'}
            
        # Ki·ªÉm tra ƒë·ªãnh d·∫°ng
        file_extension = uploaded_file.name.split('.')[-1].lower()
        if file_extension not in self.allowed_formats:
            return {
                'valid': False, 
                'error': f'ƒê·ªãnh d·∫°ng kh√¥ng h·ªó tr·ª£! Ch·ªâ ch·∫•p nh·∫≠n: {", ".join(self.allowed_formats)}'
            }
        
        # Ki·ªÉm tra k√≠ch th∆∞·ªõc
        if uploaded_file.size > self.max_file_size:
            return {
                'valid': False, 
                'error': f'File qu√° l·ªõn! T·ªëi ƒëa {self.max_file_size / (1024*1024):.0f}MB'
            }
            
        try:
            # Ki·ªÉm tra c√≥ ph·∫£i ·∫£nh h·ª£p l·ªá kh√¥ng
            image = Image.open(uploaded_file)
            image.verify()
            return {'valid': True, 'image': image}
        except Exception as e:
            return {'valid': False, 'error': f'File ·∫£nh kh√¥ng h·ª£p l·ªá: {str(e)}'}
    
    def create_prompt(self, gender: str, options: Dict[str, str]) -> str:
        """T·∫°o prompt cho AI d·ª±a tr√™n options"""
        photo_size = options.get('photo_size', '4x6')
        prompt = f"Create a professional ID photo with {photo_size} dimensions, 300 DPI resolution. "
        
        if gender == 'male':
            suit_style = options.get('suit_style', 'classic')
            suit_color = options.get('suit_color', 'navy')
            tie_style = options.get('tie_style', 'solid')
            
            prompt += f"Male subject wearing a {suit_style} {suit_color} business suit with a {tie_style} necktie. "
            prompt += "Professional formal attire, clean white background. "
            prompt += "IMPORTANT: Keep the original facial features exactly the same, only enhance appearance. "
            
        else:  # female
            outfit = options.get('female_outfit', 'blazer')
            color = options.get('female_color', 'white')
            background = options.get('background', 'white')
            
            prompt += f"Female subject wearing a {color} {outfit}. "
            prompt += f"Professional business attire with {background} background. "
            
        prompt += "Professional portrait photography, soft lighting, high resolution, passport photo quality."
        return prompt
    
    def call_ai_api(self, prompt: str, image_data: str) -> Dict[str, Any]:
        """G·ªçi AI API (demo version)"""
        try:
            # DEMO: Trong th·ª±c t·∫ø c·∫ßn g·ªçi API th·∫≠t
            # ·ªû ƒë√¢y t·∫°o ·∫£nh demo b·∫±ng PIL
            demo_image = self.create_demo_photo(prompt)
            return {
                'success': True,
                'image': demo_image,
                'message': 'Demo: ·∫¢nh th·∫ª ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!'
            }
            
        except Exception as e:
            return {
                'success': False,
                'error': f'L·ªói API: {str(e)}'
            }
    
    def create_demo_photo(self, prompt: str) -> Image.Image:
        """T·∫°o ·∫£nh demo b·∫±ng PIL"""
        # T·∫°o canvas tr·∫Øng
        width, height = 400, 600  # 4x6 aspect ratio
        image = Image.new('RGB', (width, height), 'white')
        draw = ImageDraw.Draw(image)
        
        # V·∫Ω border
        draw.rectangle([10, 10, width-10, height-10], outline='#DDDDDD', width=2)
        
        # V·∫Ω avatar (h√¨nh tr√≤n)
        center_x, center_y = width // 2, height // 2 - 50
        radius = 80
        
        # N·ªÅn avatar
        draw.ellipse([center_x - radius, center_y - radius, 
                     center_x + radius, center_y + radius], 
                    fill='#F0F0F0', outline='#CCCCCC', width=2)
        
        # V·∫Ω m·∫∑t ƒë∆°n gi·∫£n
        # M·∫Øt
        draw.ellipse([center_x - 35, center_y - 30, center_x - 15, center_y - 10], fill='#666666')
        draw.ellipse([center_x + 15, center_y - 30, center_x + 35, center_y - 10], fill='#666666')
        
        # M≈©i
        draw.line([center_x, center_y - 5, center_x + 5, center_y + 10], fill='#999999', width=2)
        
        # Mi·ªáng (c∆∞·ªùi)
        draw.arc([center_x - 20, center_y + 10, center_x + 20, center_y + 50], 
                start=0, end=180, fill='#999999', width=3)
        
        # Trang ph·ª•c
        if 'male' in prompt.lower():
            # Suit
            draw.rectangle([center_x - 60, center_y + radius - 10, 
                          center_x + 60, center_y + radius + 140], fill='#333333')
            # C·ªù v·∫°t
            draw.rectangle([center_x - 10, center_y + radius - 10,
                          center_x + 10, center_y + radius + 90], fill='#8B0000')
        else:
            # Blouse/Dress
            draw.rectangle([center_x - 70, center_y + radius - 10,
                          center_x + 70, center_y + radius + 140], fill='#4169E1')
        
        # Text th√¥ng tin
        try:
            # S·ª≠ d·ª•ng font m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y font t√πy ch·ªânh
            font_large = ImageFont.load_default()
            font_small = ImageFont.load_default()
        except:
            font_large = None
            font_small = None
        
        # Th√¥ng tin ·∫£nh th·∫ª
        gender_text = "Nam" if "male" in prompt.lower() else "N·ªØ"
        
        draw.text((center_x, height - 80), f"DEMO - ·∫¢nh th·∫ª {gender_text}", 
                 fill='#666666', font=font_large, anchor="mm")
        draw.text((center_x, height - 60), "AI Generated", 
                 fill='#666666', font=font_small, anchor="mm")
        draw.text((center_x, height - 20), datetime.datetime.now().strftime("%d/%m/%Y %H:%M"), 
                 fill='#CCCCCC', font=font_small, anchor="mm")
        
        return image

def main():
    """H√†m main c·ªßa app"""
    
    # Header
    st.title("üéØ T·∫°o ·∫¢nh Th·∫ª AI")
    st.markdown("### T·∫°o ·∫£nh th·∫ª chuy√™n nghi·ªáp v·ªõi c√¥ng ngh·ªá Gemini 2.5 Flash")
    
    # Kh·ªüi t·∫°o session state
    if 'photo_generator' not in st.session_state:
        st.session_state.photo_generator = IDPhotoGenerator()
    
    if 'generated_image' not in st.session_state:
        st.session_state.generated_image = None
        
    if 'options' not in st.session_state:
        st.session_state.options = {}
    
    # Layout ch√≠nh
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.subheader("üì∏ Upload & C·∫•u h√¨nh")
        
        # File upload
        st.markdown('<div class="upload-section">', unsafe_allow_html=True)
        uploaded_file = st.file_uploader(
            "Ch·ªçn ·∫£nh c·ªßa b·∫°n",
            type=['jpg', 'jpeg', 'png', 'webp', 'bmp'],
            help="Ch·∫•p nh·∫≠n JPG, PNG, WEBP, BMP (Max 5MB)"
        )
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Preview ·∫£nh
        if uploaded_file:
            validation = st.session_state.photo_generator.validate_image(uploaded_file)
            
            if validation['valid']:
                # Reset uploaded_file position
                uploaded_file.seek(0)
                image = Image.open(uploaded_file)
                
                st.success("‚úÖ ·∫¢nh h·ª£p l·ªá!")
                st.image(image, caption=f"üìÅ {uploaded_file.name} ({uploaded_file.size/1024:.1f} KB)", 
                        use_column_width=True)
                
                # File info
                col_info1, col_info2, col_info3 = st.columns(3)
                with col_info1:
                    st.metric("üìè K√≠ch th∆∞·ªõc", f"{image.size[0]}x{image.size[1]}")
                with col_info2:
                    st.metric("üì¶ Dung l∆∞·ª£ng", f"{uploaded_file.size/1024:.1f} KB")
                with col_info3:
                    st.metric("üñºÔ∏è ƒê·ªãnh d·∫°ng", image.format or "Unknown")
                    
            else:
                st.error(f"‚ùå {validation['error']}")
                uploaded_file = None
    
    with col2:
        st.subheader("‚öôÔ∏è T√πy ch·ªçn")
        
        # Ch·ªçn gi·ªõi t√≠nh
        gender = st.radio("üë§ Gi·ªõi t√≠nh:", ("Nam", "N·ªØ"), horizontal=True)
        gender_key = "male" if gender == "Nam" else "female"
        
        # K√≠ch th∆∞·ªõc ·∫£nh th·∫ª
        photo_size = st.selectbox("üìê K√≠ch th∆∞·ªõc ·∫£nh th·∫ª:", 
                                 ["4x6 (10x15cm)", "3x4 (7.5x10cm)", "2x3 (5x7.5cm)"])
        
        # Options theo gi·ªõi t√≠nh
        if gender == "Nam":
            st.markdown("#### üë® T√πy ch·ªçn cho Nam")
            
            suit_style = st.selectbox("üëî Ki·ªÉu √°o vest:", 
                                     ["Vest c·ªï ƒëi·ªÉn", "Vest hi·ªán ƒë·∫°i", "Vest √¥m body"])
            suit_color = st.selectbox("üé® M√†u √°o vest:", 
                                     ["Xanh navy", "ƒêen", "X√°m", "X√°m ƒëen"])
            tie_style = st.selectbox("üëî C·ªù v·∫°t:", 
                                    ["C·ªù v·∫°t tr∆°n", "C·ªù v·∫°t s·ªçc", "C·ªù v·∫°t ch·∫•m bi"])
            
            st.session_state.options = {
                'photo_size': photo_size.split()[0],
                'suit_style': suit_style.lower().replace(' ', '_'),
                'suit_color': suit_color.lower().replace(' ', '_'),
                'tie_style': tie_style.lower().replace(' ', '_')
            }
            
        else:  # N·ªØ
            st.markdown("#### üë© T√πy ch·ªçn cho N·ªØ")
            
            female_outfit = st.selectbox("üëó Trang ph·ª•c:", 
                                        ["√Åo blazer", "√Åo s∆° mi", "V√°y c√¥ng s·ªü", "√Åo len"])
            female_color = st.selectbox("üé® M√†u trang ph·ª•c:", 
                                       ["Tr·∫Øng", "ƒêen", "Xanh navy", "H·ªìng", "Xanh d∆∞∆°ng"])
            background = st.selectbox("üñºÔ∏è N·ªÅn ·∫£nh:", 
                                     ["N·ªÅn tr·∫Øng", "N·ªÅn xanh d∆∞∆°ng", "N·ªÅn x√°m", "N·ªÅn gradient"])
            
            st.session_state.options = {
                'photo_size': photo_size.split()[0],
                'female_outfit': female_outfit.lower().replace(' ', '_'),
                'female_color': female_color.lower().replace(' ', '_'),
                'background': background.lower().replace(' ', '_')
            }
    
    # N√∫t Generate (full width)
    st.markdown("---")
    
    generate_col1, generate_col2, generate_col3 = st.columns([1, 2, 1])
    with generate_col2:
        generate_btn = st.button("üöÄ T·∫°o ·∫¢nh Th·∫ª", 
                                type="primary", 
                                disabled=not uploaded_file,
                                help="T·∫£i ·∫£nh l√™n ƒë·ªÉ k√≠ch ho·∫°t" if not uploaded_file else None)
    
    # X·ª≠ l√Ω generate
    if generate_btn and uploaded_file:
        with st.spinner("‚è≥ ƒêang t·∫°o ·∫£nh th·∫ª c·ªßa b·∫°n..."):
            # T·∫°o prompt
            prompt = st.session_state.photo_generator.create_prompt(gender_key, st.session_state.options)
            
            # Convert image to base64
            uploaded_file.seek(0)
            img_bytes = uploaded_file.read()
            img_base64 = base64.b64encode(img_bytes).decode()
            
            # G·ªçi API
            result = st.session_state.photo_generator.call_ai_api(prompt, img_base64)
            
            if result['success']:
                st.session_state.generated_image = result['image']
                st.success(f"‚úÖ {result['message']}")
            else:
                st.error(f"‚ùå {result['error']}")
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    if st.session_state.generated_image:
        st.markdown("---")
        st.subheader("üì∏ K·∫øt qu·∫£")
        
        result_col1, result_col2 = st.columns([2, 1])
        
        with result_col1:
            st.image(st.session_state.generated_image, 
                    caption="·∫¢nh th·∫ª AI ƒë√£ t·∫°o", 
                    use_column_width=True)
        
        with result_col2:
            # Th√¥ng tin ·∫£nh
            st.markdown("#### üìä Th√¥ng tin")
            st.info(f"""
            üéØ **K√≠ch th∆∞·ªõc**: {st.session_state.options.get('photo_size', '4x6')}
            üë§ **Gi·ªõi t√≠nh**: {gender}
            ‚è∞ **Th·ªùi gian t·∫°o**: {datetime.datetime.now().strftime('%d/%m/%Y %H:%M')}
            """)
            
            # N√∫t actions
            st.markdown("#### üé¨ H√†nh ƒë·ªông")
            
            # Convert PIL Image to bytes for download
            img_buffer = io.BytesIO()
            st.session_state.generated_image.save(img_buffer, format='JPEG', quality=95)
            img_bytes = img_buffer.getvalue()
            
            # Download button
            st.download_button(
                label="üì• T·∫£i xu·ªëng",
                data=img_bytes,
                file_name=f"id_photo_{gender_key}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg",
                mime="image/jpeg",
                type="primary"
            )
            
            # Reset button
            if st.button("üîÑ T·∫°o l·∫°i", type="secondary"):
                st.session_state.generated_image = None
                st.experimental_rerun()
    
    # Sidebar v·ªõi th√¥ng tin
    with st.sidebar:
        st.markdown("### üõ†Ô∏è H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng")
        st.markdown("""
        1. **üì∏ T·∫£i ·∫£nh l√™n**: Ch·ªçn file ·∫£nh (JPG, PNG, WEBP)
        2. **üë§ Ch·ªçn gi·ªõi t√≠nh**: Nam ho·∫∑c N·ªØ  
        3. **‚öôÔ∏è T√πy ch·ªânh**: Ch·ªçn trang ph·ª•c, m√†u s·∫Øc, n·ªÅn
        4. **üöÄ T·∫°o ·∫£nh**: Click n√∫t "T·∫°o ·∫¢nh Th·∫ª"
        5. **üì• T·∫£i xu·ªëng**: Save ·∫£nh v·ªÅ m√°y
        """)
        
        st.markdown("---")
        st.markdown("### üìã Th√¥ng s·ªë k·ªπ thu·∫≠t")
        st.markdown("""
        - **ƒê·ªãnh d·∫°ng h·ªó tr·ª£**: JPG, PNG, WEBP, BMP
        - **K√≠ch th∆∞·ªõc t·ªëi ƒëa**: 5MB
        - **K√≠ch th∆∞·ªõc ·∫£nh th·∫ª**: 4x6, 3x4, 2x3
        - **Ch·∫•t l∆∞·ª£ng ƒë·∫ßu ra**: 300 DPI
        """)
        
        st.markdown("---")
        st.markdown("### ‚ö†Ô∏è L∆∞u √Ω")
        st.warning("""
        **Demo Mode**: Hi·ªán t·∫°i ƒëang ch·∫°y ·ªü ch·∫ø ƒë·ªô demo v·ªõi ·∫£nh m·∫´u. 
        ƒê·ªÉ s·ª≠ d·ª•ng AI th·∫≠t, c·∫ßn c·∫•u h√¨nh API key trong `API_CONFIG`.
        """)
        
        # API Status
        api_status = "üü° Demo Mode" if API_CONFIG['api_key'] == 'YOUR_API_KEY_HERE' else "üü¢ API Ready"
        st.markdown(f"**Tr·∫°ng th√°i API**: {api_status}")

if __name__ == "__main__":
    main()
